-- Q1: Hospital Patient Records Analysis
-- We use recursion + pattern matching (no mutable variables, no external libs)

-- Define type synonym for readability
type Patient = (String, Int, Int)  
-- (Name, Age, ReasonCode)

-- Sample built-in data (used when no user input)
sampleData :: [Patient]
sampleData =
  [("Alice", 25, 1),
   ("Bob", 40, 2),
   ("Charlie", 12, 1),
   ("Diana", 30, 3),
   ("Eve", 17, 2),
   ("Frank", 50, 3)]

-----------------------------------------------------
-- Function to count patients by ReasonCode
-----------------------------------------------------

-- Count patients in category "General Checkup" (Reason = 1)
countCheckup :: [Patient] -> Int
countCheckup [] = 0
countCheckup ((_,_,reason):xs)
  | reason == 1 = 1 + countCheckup xs
  | otherwise   = countCheckup xs

-- Count patients in category "Emergency" (Reason = 2)
countEmergency :: [Patient] -> Int
countEmergency [] = 0
countEmergency ((_,_,reason):xs)
  | reason == 2 = 1 + countEmergency xs
  | otherwise   = countEmergency xs

-- Count patients in category "Surgery" (Reason = 3)
countSurgery :: [Patient] -> Int
countSurgery [] = 0
countSurgery ((_,_,reason):xs)
  | reason == 3 = 1 + countSurgery xs
  | otherwise   = countSurgery xs

-----------------------------------------------------
-- Function to count adult patients (Age >= 18)
-----------------------------------------------------
countAdults :: [Patient] -> Int
countAdults [] = 0
countAdults ((_,age,_):xs)
  | age >= 18 = 1 + countAdults xs
  | otherwise = countAdults xs

-----------------------------------------------------
-- Main function: choose between user input & sample
-----------------------------------------------------

main :: IO ()
main = do
  putStrLn "Hospital Patient Records Analysis"
  putStrLn "Do you want to enter records manually? (yes/no)"
  choice <- getLine
  if choice == "yes"
    then do
      putStrLn "Enter records in format Name:Age:Reason (empty line to stop):"
      patients <- readPatients
      analyze patients
    else do
      putStrLn "Using built-in sample data..."
      analyze sampleData

-----------------------------------------------------
-- Helper: Read patient records from user
-----------------------------------------------------
readPatients :: IO [Patient]
readPatients = do
  line <- getLine
  if null line
    then return []
    else do
      let parts = splitBy ':' line
      -- Convert to (Name, Age, Reason)
      let name   = parts !! 0
      let age    = read (parts !! 1) :: Int
      let reason = read (parts !! 2) :: Int
      rest <- readPatients
      return ((name, age, reason) : rest)

-- Custom string splitter (since no libraries allowed)
splitBy :: Char -> String -> [String]
splitBy _ "" = [""]
splitBy delim (c:cs)
  | c == delim = "" : rest
  | otherwise  = (c : head rest) : tail rest
  where
    rest = splitBy delim cs

-----------------------------------------------------
-- Analysis Function (displays results)
-----------------------------------------------------
analyze :: [Patient] -> IO ()
analyze patients = do
  let c1 = countCheckup patients
  let c2 = countEmergency patients
  let c3 = countSurgery patients
  let adults = countAdults patients
  putStrLn ("General Checkup patients : " ++ show c1)
  putStrLn ("Emergency patients       : " ++ show c2)
  putStrLn ("Surgery patients         : " ++ show c3)
  putStrLn ("Total adult patients     : " ++ show adults)

--Manual user input

Hospital Patient Records Analysis
Do you want to enter records manually? (yes/no)
yes
Enter records in format Name:Age:Reason (empty line to stop):
Sam:22:1
Lily:35:2
Tom:16:3
Anna:40:1

<press Enter here to stop>
General Checkup patients : 2
Emergency patients       : 1
Surgery patients         : 1
Total adult patients     : 3
